

# This file was *autogenerated* from the file precompute.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x176c11cf13e54b11406fcec87bd4c1480f2bf6b3cf47c54370febd1c756e54f72c1501712922baf5993402979d50dd13d09a841fed4773cfdb168f19a73e323f656921d7dcd797059b7b9ac3245c4d7be6b343ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff = Integer(0x176c11cf13e54b11406fcec87bd4c1480f2bf6b3cf47c54370febd1c756e54f72c1501712922baf5993402979d50dd13d09a841fed4773cfdb168f19a73e323f656921d7dcd797059b7b9ac3245c4d7be6b343ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6)
prime = _sage_const_0x176c11cf13e54b11406fcec87bd4c1480f2bf6b3cf47c54370febd1c756e54f72c1501712922baf5993402979d50dd13d09a841fed4773cfdb168f19a73e323f656921d7dcd797059b7b9ac3245c4d7be6b343ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 
Fq = GF(prime**_sage_const_2 , name="z2", modulus=[_sage_const_1 , _sage_const_0 , _sage_const_1 ])
E_start = EllipticCurve(Fq, [_sage_const_0 , _sage_const_6 , _sage_const_0 , _sage_const_1 , _sage_const_0 ])
P, Q = E_start.gens()
assert P.order() == (prime**_sage_const_2  - _sage_const_1 )

